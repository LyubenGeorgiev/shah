package components

import (
	"github.com/LyubenGeorgiev/shah/view/board/models"
	"github.com/LyubenGeorgiev/shah/view/layout"
	"fmt"
	"strings"
)

var squareToString = [...]string{
	"a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
	"a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7",
	"a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",
	"a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",
	"a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",
	"a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",
	"a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",
	"a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1",
}

func pieceSide(piece string) models.Side {
	if strings.ToLower(piece) == piece {
		return models.Black
	}

	return models.White
} 

templ clickableSquare(square int, action string, clases... string) {
	<div class={ clases }
		 id={ squareToString[square] }
		 name={ action }
		 ws-send>
	</div>
}

templ BoardWebsocket(gameID string) {
	@layout.Layout("Play") {
		<div class="flex items-center h-full w-full p-4 bg-gray-800" hx-ext="ws" ws-connect={ "/game/" + gameID }>
			<div id="board">Searching for game</div>
			<div id="chat" name="chat" hx-target="#chat" hx-swap-oob="outerHTML" hx-trigger="load" ws-send></div>
			// @Chat()
		</div>
	}
}

templ Message(message models.Message) {
	<div id="messages" hx-swap-oob="beforeend">
		<div class={ "flex my-2", templ.KV("justify-start", message.IsFromOpponent), templ.KV("justify-end", !message.IsFromOpponent) }>
			<div class={ "text-white p-3 rounded-lg max-w-[80%]", templ.KV("bg-blue-500", message.IsFromOpponent), templ.KV("bg-green-500", !message.IsFromOpponent) }>
				<span class="whitespace-pre-line break-all">{ message.Text }</span>
			</div>
		</div>
	</div>
}

templ Chat(messages []models.Message) {
	<div id="chat" class="flex flex-col ml-2 w-full h-full bg-gray-700 rounded h-[calc(min(80vh,80vw))]">
		<div id="messages" class="overflow-y-auto h-full m-2">
			for _, message := range messages {
				@Message(message)
			}
		</div>
		<form class="h-14" name="message" ws-send>
			<input name="chat_message" class="w-full h-full rounded-b bg-gray-600 text-white focus:outline-none"/>
		</form>
	</div>
}

templ Board(bs *models.BoardState) {
	<div id="board" class={ "rounded board", templ.KV("flipped", bs != nil && bs.View == models.Black) } hx-target="#board" hx-swap-oob="outerHTML" hx-trigger="click">
		for _, square := range bs.Highlighted {
			<div class={ "highlight", fmt.Sprintf("square-%d", square) }></div>
		}

		for square, piece := range bs.Pieces {
			if pieceSide(piece) == bs.View {
				@clickableSquare(square, "select", "piece", piece, fmt.Sprintf("square-%d", square))
			} else {
				@clickableSquare(square, "unselect", "piece", piece, fmt.Sprintf("square-%d", square))
			}
		}

		for i := 0; i < 64; i++ {
			if _, ok := bs.Pieces[i]; !ok {
				@clickableSquare(i, "unselect", "piece", fmt.Sprintf("square-%d", i))
			}
		}

		for _, square := range bs.Moves {
			@clickableSquare(square, "move", "hint", fmt.Sprintf("square-%d", square))
		}

		for _, square := range bs.Captures {
			@clickableSquare(square, "move", "capture-hint", fmt.Sprintf("square-%d", square))
		}
	</div>
}